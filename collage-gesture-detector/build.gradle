apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

// Gradle doc:
// http://google.github.io/android-gradle-dsl/
android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion

        def givenVersionName = project.findProperty('versionName') ?: '99.99.99-dev'
        versionCode generateVersionCode(givenVersionName)
        versionName givenVersionName

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            // Configurable ProGuard testing, for example,
            // "./gradlew assembleDebug -PtestProguard=true"
            minifyEnabled project.hasProperty('testProguard')
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

repositories {
    google()
    jcenter()
    mavenCentral()
}

dependencies {
    api fileTree(dir: 'libs', include: ['*.jar'])

    // Kotlin
    api rootProject.ext.dep.kotlinStdlibJdk7

    // Unit tests.
    testImplementation rootProject.ext.dep.testJunit
    testImplementation rootProject.ext.dep.testMockito

    // Instrumentation tests.
    androidTestImplementation rootProject.ext.dep.testRunner
    androidTestImplementation rootProject.ext.dep.testEspressoCore
}

/**
 * Extract major, minor, and patch version code and compose them to a version
 * code.
 *
 * @param versionName the version name, could be like "99.99.99-dev"
 * @return The version code
 */
private static Integer generateVersionCode(String versionName) {
    // Filter postfix like "-dev"
    final int postfixIndex = versionName.indexOf("-")
    if (postfixIndex >= 0) {
        versionName = versionName.substring(0, postfixIndex)
    }
    // Extract version integers
    final String[] versions = versionName.split("\\.")
    assert versionName.split('.') instanceof String[]
    final int major = Integer.parseInt(versions[0])
    final int minor = Integer.parseInt(versions[1])
    final int patch = Integer.parseInt(versions[2])

    // 00    00    00
    // major minor patch
    return major * 10000 + minor * 100 + patch
}

// Deployment script.
apply from: 'deploy.gradle'
